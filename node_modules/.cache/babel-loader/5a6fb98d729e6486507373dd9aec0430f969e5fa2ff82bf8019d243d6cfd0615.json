{"ast":null,"code":"var _jsxFileName = \"/Users/at-mac07/Documents/github/crmfront/src/Agents.js\",\n  _s = $RefreshSig$();\n// // src/Agents.js\n// import React from 'react';\n// import { Link } from 'react-router-dom';\n// import Navbar from './Navbar';\n\n// const agentsData = [\n//   { id: 1, name: 'Agent Smith' },\n//   { id: 2, name: 'Agent Johnson' },\n//   { id: 3, name: 'Agent Carter' },\n// ];\n\n// const Agents = () => {\n//   return (\n//     <div>\n//       <h1>Agents Page</h1>\n//       <Navbar />\n\n//       <ul>\n//         {agentsData.map(agent => (\n//           <li key={agent.id}>{agent.name}</li>\n//         ))}\n\n//       </ul>\n//       <div>  <Link to=\"/home\">\n//   <button className=\"home-button\">Home page</button>\n// </Link> </div>\n\n//     </div>\n\n//   );\n// };\n\n// export default Agents;\n\nimport React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport './Agents.css';\n\n// Comment Component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Comment = ({\n  comment\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [comment.author, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }, this), \" \", comment.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"timestamp\",\n      children: comment.timestamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n// Comments Section Component\n_c = Comment;\nconst Agents = () => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [author, setAuthor] = useState('');\n  const [text, setText] = useState('');\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    const newComment = {\n      id: Date.now(),\n      // Unique ID for each comment\n      author: author,\n      text: text,\n      timestamp: new Date().toLocaleString(),\n      replies: []\n    };\n    setComments([...comments, newComment]);\n    setAuthor('');\n    setText('');\n  };\n  const handleReplySubmit = (commentId, replyText) => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === commentId) {\n        const newReply = {\n          author: author,\n          text: replyText,\n          timestamp: new Date().toLocaleString()\n        };\n        return {\n          ...comment,\n          replies: [...comment.replies, newReply]\n        };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Your Name\",\n        value: author,\n        onChange: e => setAuthor(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add a comment...\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment,\n        onReply: handleReplySubmit\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n};\n_s(Agents, \"Yi0eFlrZb0tgdVrsrTa/dLOFHYc=\");\n_c2 = Agents;\nexport default Agents;\nvar _c, _c2;\n$RefreshReg$(_c, \"Comment\");\n$RefreshReg$(_c2, \"Agents\");","map":{"version":3,"names":["React","useState","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","Comment","comment","className","children","author","fileName","_jsxFileName","lineNumber","columnNumber","text","timestamp","_c","Agents","_s","comments","setComments","setAuthor","setText","handleCommentSubmit","e","preventDefault","newComment","id","Date","now","toLocaleString","replies","handleReplySubmit","commentId","replyText","updatedComments","map","newReply","onSubmit","type","placeholder","value","onChange","target","required","onReply","_c2","$RefreshReg$"],"sources":["/Users/at-mac07/Documents/github/crmfront/src/Agents.js"],"sourcesContent":["// // src/Agents.js\n// import React from 'react';\n// import { Link } from 'react-router-dom';\n// import Navbar from './Navbar';\n\n\n// const agentsData = [\n//   { id: 1, name: 'Agent Smith' },\n//   { id: 2, name: 'Agent Johnson' },\n//   { id: 3, name: 'Agent Carter' },\n// ];\n\n// const Agents = () => {\n//   return (\n//     <div>\n//       <h1>Agents Page</h1>\n//       <Navbar />\n\n//       <ul>\n//         {agentsData.map(agent => (\n//           <li key={agent.id}>{agent.name}</li>\n//         ))}\n       \n//       </ul>\n//       <div>  <Link to=\"/home\">\n//   <button className=\"home-button\">Home page</button>\n// </Link> </div>\n     \n//     </div>\n    \n//   );\n// };\n\n// export default Agents;\n\n\n\n\nimport React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport './Agents.css'\n\n// Comment Component\nconst Comment = ({ comment }) => {\n    return (\n        <div className=\"comment\">\n            <p><strong>{comment.author}:</strong> {comment.text}</p>\n            <p className=\"timestamp\">{comment.timestamp}</p>\n        </div>\n    );\n};\n\n// Comments Section Component\nconst Agents = () => {\n  const [comments, setComments] = useState([]);\n  const [author, setAuthor] = useState('');\n  const [text, setText] = useState('');\n\n  const handleCommentSubmit = (e) => {\n      e.preventDefault();\n      const newComment = {\n          id: Date.now(), // Unique ID for each comment\n          author: author,\n          text: text,\n          timestamp: new Date().toLocaleString(),\n          replies: [],\n      };\n      setComments([...comments, newComment]);\n      setAuthor('');\n      setText('');\n  };\n\n  const handleReplySubmit = (commentId, replyText) => {\n      const updatedComments = comments.map(comment => {\n          if (comment.id === commentId) {\n              const newReply = {\n                  author: author,\n                  text: replyText,\n                  timestamp: new Date().toLocaleString(),\n              };\n              return { ...comment, replies: [...comment.replies, newReply] };\n          }\n          return comment;\n      });\n      setComments(updatedComments);\n  };\n\n  return (\n      <div className=\"comments-section\">\n        <></>\n          <h2>Comments</h2>\n          <form onSubmit={handleCommentSubmit}>\n              <input\n                  type=\"text\"\n                  placeholder=\"Your Name\"\n                  value={author}\n                  onChange={(e) => setAuthor(e.target.value)}\n                  required\n              />\n              <textarea\n                  placeholder=\"Add a comment...\"\n                  value={text}\n                  onChange={(e) => setText(e.target.value)}\n                  required\n              />\n              <button type=\"submit\">Submit</button>\n          </form>\n          <div className=\"comments-list\">\n              {comments.map((comment) => (\n                  <Comment key={comment.id} comment={comment} onReply={handleReplySubmit} />\n              ))}\n          </div>\n      </div>\n  );\n};\nexport default Agents;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}